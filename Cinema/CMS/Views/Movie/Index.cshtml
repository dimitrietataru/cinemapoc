@model CMS.Models.PagedViewModel<CMS.Models.Movie.MovieIndexViewModel>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, PagedList.Core.Mvc
@{
    ViewData["Title"] = $"Movies ({Model.Count})";
    var orderArrow = "glyphicon glyphicon-arrow-" + (Model.IsAsc ? "up" : "down");
}

<div class="col-lg-12 col-md-12">
    <div class="panel panel-default mt-40">
        <div class="panel-heading">
            <h3>
                MOVIES
                <span class="btn-group pull-right">
                    <a asp-action="Create" title="Create" class="btn btn-default">
                        <span class="glyphicon glyphicon-plus-sign"></span>
                    </a>
                </span>
            </h3>
            @using (Html.BeginForm("Index", "Movie", FormMethod.Get))
            {
                <div class="form-inline">
                    <input type="hidden" asp-for="OrderBy" class="form-control" />
                    <input type="hidden" asp-for="IsAsc" class="form-control" />

                    <input asp-for="Filter" class="form-control" />
                    <input class="btn btn-default" type="submit" value="Search">
                    <input asp-for="IsExact" class="form-control" title="Exact filter matching!" />
                </div>
            }
        </div>
        <div class="panel-body panel-body-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th class="col-lg-2 col-md-2">
                            @Html.ActionLink("Name", "Index", BuildPagerRoute(new List<(string, object)> { ("orderBy", "Name"), ("isAsc", !Model.IsAsc) }))
                            @if ("Name".Equals(Model.OrderBy))
                            {
                                <i class="@orderArrow"></i>
                            }
                        </th>
                        <th class="col-lg-1 col-md-1">
                            @Html.ActionLink("Minutes", "Index", BuildPagerRoute(new List<(string, object)> { ("orderBy", "Duration"), ("isAsc", !Model.IsAsc) }))
                            @if ("Duration".Equals(Model.OrderBy))
                            {
                                <i class="@orderArrow"></i>
                            }
                        </th>
                        <th class="col-lg-2 col-md-2">
                            @Html.ActionLink("Studio", "Index", BuildPagerRoute(new List<(string, object)> { ("orderBy", "Studio"), ("isAsc", !Model.IsAsc) }))
                            @if ("Studio".Equals(Model.OrderBy))
                            {
                                <i class="@orderArrow"></i>
                            }
                        </th>
                        <th class="col-lg-2 col-md-2">
                            @Html.ActionLink("Start date", "Index", BuildPagerRoute(new List<(string, object)> { ("orderBy", "StartDate"), ("isAsc", !Model.IsAsc) }))
                            @if ("StartDate".Equals(Model.OrderBy))
                            {
                                <i class="@orderArrow"></i>
                            }
                        </th>
                        <th class="col-lg-2 col-md-2">
                            @Html.ActionLink("End date", "Index", BuildPagerRoute(new List<(string, object)> { ("orderBy", "EndDate"), ("isAsc", !Model.IsAsc) }))
                            @if ("EndDate".Equals(Model.OrderBy))
                            {
                                <i class="@orderArrow"></i>
                            }
                        </th>
                        <th class="col-lg-3 col-md-3">
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Name)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Duration)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Studio)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.StartDate)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.EndDate)
                            </td>
                            <td>
                                <div class="btn-group pull-right">
                                    <a href="@Url.Action("AssignMovie", "Movie", new { id = item.Id })" title="Assign Movie to Cinema" class="btn btn-default">
                                        <span class="glyphicon glyphicon-facetime-video"></span>
                                    </a>
                                    <a href="@Url.Action("Details", "Movie", new { id = item.Id })" title="Details" class="btn btn-default">
                                        <span class="glyphicon glyphicon-eye-open"></span>
                                    </a>
                                    <a href="@Url.Action("Edit", "Movie", new { id = item.Id })" title="Edit" class="btn btn-default">
                                        <span class="glyphicon glyphicon-edit"></span>
                                    </a>
                                    <a href="@Url.Action("Delete", "Movie", new { id = item.Id })" title="Delete" class="btn btn-default">
                                        <span class="glyphicon glyphicon-trash"></span>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="panel-footer text-center">
            <pager list="@Model" asp-controller="Movie" asp-action="Index" asp-all-route-data="@BuildPagerRoute()" />
        </div>
    </div>
</div>

@{
    IDictionary<string, string> BuildPagerRoute(List<(string, object)> exceptions = null)
    {
        var route = new Dictionary<string, string>
        {
            { "size", Model.Size.ToString() },
            { "orderBy", Model.OrderBy.ToString() },
            { "isAsc", Model.IsAsc.ToString() },
            { "filter", Model.Filter?.ToString() ?? "" },
            { "isExact", Model.IsExact.ToString() }
        };

        if (exceptions is null)
        {
            return route;
        }

        exceptions.ForEach(r => route[r.Item1] = r.Item2.ToString());

        return route;
    }
}
